import type { ConversationSummary, GroupListItem, Project, SpanRecord } from '../types'

const json = async <T>(res: Response): Promise<T> => {
  if (!res.ok) throw new Error(`HTTP ${res.status}`)
  return res.json() as Promise<T>
}

export async function fetchProjects(): Promise<Project[]> {
  const res = await fetch('/api/projects')
  return json<Project[]>(res)
}

export async function fetchConversations(params: { limit?: number; before?: string | null; q?: string }): Promise<GroupListItem[]> {
  const u = new URL('/api/conversations', window.location.origin)
  if (params.limit != null) u.searchParams.set('limit', String(params.limit))
  if (params.before) u.searchParams.set('before', params.before)
  if (params.q && params.q.trim()) u.searchParams.set('q', params.q.trim())
  const res = await fetch(u.toString())
  const convs = await json<ConversationSummary[]>(res)
  return Array.isArray(convs)
    ? convs.map((c) => ({
        trace_id: c.id,
        first_start_time: c.first_start_time,
        last_end_time: c.last_end_time,
        span_count: c.span_count,
        model: c.model ?? undefined,
      }))
    : []
}

export async function fetchGroupSpans(conversationId: string, q?: string): Promise<SpanRecord[]> {
  const u = new URL(`/api/trace-groups/${encodeURIComponent(conversationId)}`, window.location.origin)
  if (q && q.trim()) u.searchParams.set('q', q.trim())
  const res = await fetch(u.toString())
  return json<SpanRecord[]>(res)
}

export async function deleteConversation(conversationId: string): Promise<void> {
  const res = await fetch(`/api/conversations/${encodeURIComponent(conversationId)}`, { method: 'DELETE' })
  if (!res.ok) throw new Error(`HTTP ${res.status}`)
}

// Generated by Copilot