import { useEffect, useMemo, useState } from 'react'
import WaterfallView from './components/WaterfallView'
import './ConversationDetails.css'
import type { SpanRecord } from './types'

interface ConversationDetailsProps {
  conversationId: string
  onClose: () => void
}

interface LinkedConversationInfo {
  span_id: string
  conversation_id: string
  relation?: string
}

export default function ConversationDetails({ conversationId, onClose }: ConversationDetailsProps) {
  const [spans, setSpans] = useState<SpanRecord[]>([])
  const [loading, setLoading] = useState<boolean>(true)
  const [linkedConversations, setLinkedConversations] = useState<LinkedConversationInfo[]>([])

  useEffect(() => {
    if (!conversationId) return
    let cancelled = false
    const load = async () => {
      setLoading(true)
      try {
        const res = await fetch(`/api/trace-groups/${encodeURIComponent(conversationId)}`)
        if (!res.ok) throw new Error('Failed to fetch conversation')
        const data: SpanRecord[] = await res.json()
        if (!cancelled) setSpans(data)
        // linked conversations
        try {
          const linkedRes = await fetch(`/api/conversations/${encodeURIComponent(conversationId)}/linked`)
          if (linkedRes.ok) {
            const links: LinkedConversationInfo[] = (await linkedRes.json()) || []
            if (!cancelled) setLinkedConversations(links)
          }
        } catch {}
      } catch (e) {
        console.error('Failed to fetch conversation:', e)
      } finally {
        if (!cancelled) setLoading(false)
      }
    }
    load()
    return () => { cancelled = true }
  }, [conversationId])

  return (
    <div className="trace-details">
      <div className="details-header">
        <div>
          <h2>Conversation Details</h2>
        </div>
        <button className="close-btn" onClick={onClose} aria-label="Close">×</button>
      </div>
      {loading && <div className="loading">Loading…</div>}
      {!loading && spans.length === 0 && <div className="empty-state">No spans</div>}
      {!loading && spans.length > 0 && (
        <WaterfallView spans={spans} showLegend={true} />
      )}
    </div>
  )
}

// Generated by Copilot